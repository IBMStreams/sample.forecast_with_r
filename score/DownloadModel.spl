namespace score;
use com.ibm.streamsx.messagehub::* ;
use com.ibm.streamsx.datetime::* ;

use com.ibm.streams.rproject::* ;
use com.ibm.streams.rproject::RScript ;
 use com.ibm.streamsx.objectstorage::*;
/**
* Uses the ObjectStorageScan operator to monitor a directory in Cloud Object Storage for files.
* Downloads a new .rds file and saves it to the local directory as /tmp/latest_model.rds.
* Then it will sumbit the name of a new script that will load the new model and update the scoring function.
*/

composite DownloadUpdatesFromCOS (output Updates){
  param
    expression<rstring> $credentials: getSubmissionTimeValue("credentials");
    expression<rstring> $objectStorageURI: "s3a://models-demo";
    expression<rstring> $endpoint: "s3.us.cloud-object-storage.appdomain.cloud";

graph
stream<rstring objectname> ObjectNames = ObjectStorageScan() {
  param
    objectStorageURI: $objectStorageURI;
    endpoint : $endpoint;
    pattern: ".*\\.rds$";
    directory: "/";
    initDelay: 90.0;
  }

  stream<blob content> ObjectData = ObjectStorageSource(ObjectNames) {
  param
    objectStorageURI: $objectStorageURI;
    endpoint: $endpoint;
  }

stream<rstring name>  NewModelSink = FileSink(ObjectData) {
  param
    file: "/tmp/model_latest.rds";
    format: block;
    closeMode: punct;
  config
  //Placing the filesink on the same PE as the RScript operatoR ensures that RScript operator will always be on the same
      //host as the FileSink, so that it can access the new model written by the filesink.
    placement: partitionColocation("SinkData");

}

stream<rstring updatedFile> Updates = Custom(NewModelSink){
  logic
  onTuple NewModelSink:
    {
      printStringLn("Saved file to  "  + name);
      //Note - we are not submitting the name of the model, but the name of a script
      //RScript operator expects the name of a script, but we are demo-ing downloading an updated model
      //The script will check for the presence of a new model and load it.
      //So everytime a new file is added to the COS bucket, the same script name is submitted
      //That script always reloads the latest version of /tmp/model_latest.rds and redefines the score function to use that model.
      submit({updatedFile=getApplicationDir() + "/etc/R/reloadModel.r" },Updates);
    }
    config
    placement: partitionColocation("SinkData");
}

() as Cleanup = Custom()
{
    logic
    onProcess: {
      while (!isShutdown()) {
        block(4.0);
      }
      mutable int32 err = 0;
    //om.ibm.streamsx.objectstorage.s3::deleteAllObjects("s3a://models-demo");
      spl.file::remove("/tmp/model_latest.rds", err);
      printStringLn("Removed model? " + (rstring)err);

    }
      config
      //Placing them on the same partition makes sure that the RScript operator will always be on the same
      //host as the FileSink that saves the new model so it can access it.
    placement: partitionColocation("SinkData");

}

}
