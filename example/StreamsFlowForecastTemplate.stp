{"metadata":{"guid":"0aafe027-ad69-4f6e-a30e-3610d4617332","url":"/v2/streaming_pipelines/0aafe027-ad69-4f6e-a30e-3610d4617332","created_at":"2019-09-17T17:13:31Z","updated_at":"2019-09-17T18:02:31Z","revision":1568743351496},"entity":{"name":"StreamsFlowForecastTemplate","description":"","project_guid":"e57ea937-ce51-4d3e-b859-e5e30b901b0d","graph":{"doc_type":"pipeline","version":"1.0","json_schema":"http://www.ibm.com/ibm/wdp/flow-v1.0/pipeline-flow-v1-schema.json","id":"","app_data":{"ui_data":{"name":"StreamsFlowForecastTemplate"}},"primary_pipeline":"primary-pipeline","pipelines":[{"id":"primary-pipeline","runtime":"streams","nodes":[{"id":"code_pmyuof4grsh","type":"binding","op":"ibm.streams.sources.code","outputs":[{"id":"target","schema_ref":"schema0","links":[{"node_id_ref":"code_idn8f48yh","port_id_ref":"source"}]}],"parameters":{"code":"#\n# YOU MUST EDIT THE SCHEMA and add all attributes that you are returning as output.\n#\n# Preinstalled Python packages can be viewed from the Settings pane.\n# In the Settings pane you can also install additional Python packages.\n\nimport sys\nimport time\nimport datetime\nimport random\nimport logging\n\n# Use this logger for tracing or debugging your code:\nlogger = logging.getLogger(__name__)\n# Example:\n#     logger.info('Got to step 2...')\n\n# init() function will be called once on flow initialization\n# @state a Python dictionary object for keeping state. The state object is passed to the produce function\ndef init(state):\n    # do something once on flow initialization and save in the state object\n    pass\n\n\n# produce() function will be called when the job starts to run.\n# It is called on a background thread, and it will typically invoke the 'submit()' callback\n# whenever a tuple of data is ready to be emitted from this operator.\n# This allows for using asynchronous data services as well as synchronous data generation or retrieval.\n# @submit a Python callback function that takes one argument: a dictionary representing a single tuple.\n# @state a Python dictionary object for keeping state\n# You must declare all output attributes in the Edit Schema window.\ndef produce(submit, state):\n    while True:\n        # Submit a tuple in each iteration:\n        address = \"A7\" + str(random.randint(14, 40)) + \"_\"+ chr(random.randint(65,123))\n        ts = int(datetime.datetime.now().timestamp())\n        submit({\"id\": random.randint(100, 500), \"address\": address, \"time\": ts})\n\n\n","schema_mapping":[{"name":"id","type":"double","length":0,"source_elem_name":""},{"name":"address","type":"string","length":0,"source_elem_name":"","target_elem_name":""},{"name":"time","type":"double","length":0,"source_elem_name":"","target_elem_name":""}]},"app_data":{"ui_data":{"label":"InputData","x_pos":-1740,"y_pos":290}}},{"id":"code_idn8f48yh","type":"execution_node","op":"ibm.streams.operations.code","outputs":[{"id":"target","schema_ref":"schema1","links":[{"node_id_ref":"streams_h9y92hv0svn","port_id_ref":"source"},{"node_id_ref":"debug_no5jglkfbpp","port_id_ref":"source"}]}],"parameters":{"code":"#\n# YOU MUST EDIT THE SCHEMA and add all attributes that you are returning as output.\n#\n# Preinstalled Python packages can be viewed from the Settings pane.\n# In the Settings pane you can also install additional Python packages.\n\nimport sys\nimport logging\nimport json\n# Use this logger for tracing or debugging your code:\nlogger = logging.getLogger(__name__)\n# Example:\n#     logger.info('Got to step 2...')\n\n# init() function will be called once on flow initialization\n# @state a Python dictionary object for keeping state. The state object is passed to the process function\ndef init(state):\n    # do something once on flow initialization and save in the state object\n    pass\n\n\n# process() function will be invoked on every event tuple\n# @event a Python dictionary object representing the input event tuple as defined by the input schema\n# @state a Python dictionary object for keeping state over subsequent function calls\n# return must be a Python dictionary object. It will be the output of this operator.\n#        Returning None results in not submitting an output tuple for this invocation.\n# You must declare all output attributes in the Edit Schema window.\ndef process(event, state):\n    # Enrich the event, such as by:\n    # event['wordCount'] = len(event['phrase'].split())\n    event_as_json = json.dumps(event)\n    return {'jsonString': event_as_json}","schema_mapping":[{"name":"jsonString","type":"string","length":0,"source_elem_name":""}]},"app_data":{"ui_data":{"label":"ConvertToJson","x_pos":-1490,"y_pos":290}}},{"id":"streams_h9y92hv0svn","type":"binding","op":"ibm.streams.targets.streams","parameters":{"topic":"inputData"},"app_data":{"ui_data":{"label":"PublishToStreams","x_pos":-1210,"y_pos":340}}},{"id":"debug_no5jglkfbpp","type":"binding","op":"ibm.streams.targets.debug","parameters":{},"app_data":{"ui_data":{"label":"ShowResults","x_pos":-1200,"y_pos":260}}},{"id":"streams_vqj6la6ciai","type":"binding","op":"ibm.streams.sources.streams","outputs":[{"id":"target","schema_ref":"schema2","links":[{"node_id_ref":"debug_upabvlrkqs","port_id_ref":"source"}]}],"parameters":{"asset":{"id":"demo/forecast-results","name":"demo/forecast-results","path":"demo/forecast-results","type":"topic","fields":[{"name":"forecastedValue","type":"double","spl_type":"float32","source_elem_name":"/forecastedValue"},{"name":"id","type":"double","spl_type":"float64","source_elem_name":"/id"},{"name":"time","type":"double","spl_type":"float64","source_elem_name":"/time"},{"name":"unique_users","type":"double","spl_type":"int32","source_elem_name":"/unique_users"},{"name":"total_users","type":"double","spl_type":"int32","source_elem_name":"/total_users"}]},"schema_mapping":[{"name":"forecastedValue","type":"double","spl_type":"float32","path":"/forecastedValue"},{"name":"id","type":"double","spl_type":"float64","path":"/id"},{"name":"time","type":"double","spl_type":"float64","path":"/time"},{"name":"unique_users","type":"double","spl_type":"int32","path":"/unique_users"},{"name":"total_users","type":"double","spl_type":"int32","path":"/total_users"}]},"app_data":{"ui_data":{"label":"IngestForecast","x_pos":-1700,"y_pos":440}}},{"id":"debug_upabvlrkqs","type":"binding","op":"ibm.streams.targets.debug","parameters":{},"app_data":{"ui_data":{"label":"Debug","x_pos":-1420,"y_pos":440}}}]}],"schemas":[{"id":"schema0","fields":[{"name":"id","type":"double"},{"name":"address","type":"string"},{"name":"time","type":"double"}]},{"id":"schema1","fields":[{"name":"jsonString","type":"string"}]},{"id":"schema2","fields":[{"name":"forecastedValue","type":"double","splType":"float32"},{"name":"id","type":"double","splType":"float64"},{"name":"time","type":"double","splType":"float64"},{"name":"unique_users","type":"double","splType":"int32"},{"name":"total_users","type":"double","splType":"int32"}]}]},"engines":{"streams":{"instance_id":"57ebccbb-9648-47e0-a05f-0aadd19a77a5"}}}}