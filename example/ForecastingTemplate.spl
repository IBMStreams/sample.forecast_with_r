namespace example;
use com.ibm.streamsx.topology.topic::* ;
use com.ibm.streamsx.json::* ;
use com.ibm.streams.rproject::RScript ;

type JsonData = rstring jsonString ;


//Change this type to match the type of the attributes you expect
type InputDataSchema =float64 id, float64 time, int32 unique_users, int32 total_users;
//Edit this type to add more values, e..g type ForecastResult = tuple <float32 value1, float32 value2>, InputDataSchema;
type ForecastResult = tuple <float32 forecastedValue, int32 forecastedValue2>, InputDataSchema;

composite ForecastTemplate {

 param
        expression<rstring> $appDir : getApplicationDir();
  
	graph
		stream<JsonData> JsonDataToScore = Subscribe()
		{
			param
				topic : "inputData" ;
                streamType: JsonData;
                                
		}

		stream<InputDataSchema> DataToScore = JSONToTuple(JsonDataToScore)
		{
  		param
  			inputAttribute: jsonString;
		}


 stream<ForecastResult> RScriptResult =	RScript(DataToScore)
    {
      param
        initializationScriptFileName :  $appDir + "/etc/R/initialize.r" ; //edit this file to load your model
        rScriptFileName :  $appDir + "/etc/R/predict.r" ; //
        streamAttributes : unique_users, total_users ;
        rObjects : "num_unique_users", "total_users_counted" ; // these are the variable names the R script expects

      output
        RScriptResult : forecastedValue = fromR("predictedCount") ; // predictedCount is the result from the R script
    }
   
		stream< rstring message> ForecastAsJson =
					com.ibm.streamsx.json::TupleToJSON(RScriptResult)
				{
					param
						jsonStringAttribute : "message" ;
				}


         () as PublishForecast = Publish(ForecastAsJson)
			{
				param
					topic : "demo/forecast-results" ;
			}


}
